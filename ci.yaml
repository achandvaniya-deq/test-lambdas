# name: Deploy lambda[Staging]
# on:
#   push:
#     paths:
#       - 'lambda_functions/function1/**'
#       - 'lambda_functions/function2/**'

# jobs:
#   # JOB to run change detection
#   changes:
#     runs-on: ubuntu-latest
#     outputs:
#       # Expose matched filters as job 'packages' output variable
#       packages: ${{ steps.filter.outputs.changes }}
#     steps:
#     # For pull requests it's not necessary to checkout the code
#     - uses: dorny/paths-filter@v2
#       id: filter
#       with:
#         filters: |
#           package1: src/package1
#           package2: src/package2

#   # JOB to build and test each of modified packages
#   build:
#     needs: changes
#     strategy:
#       matrix:
#         # Parse JSON array containing names of all filters matching any of changed files
#         # e.g. ['package1', 'package2'] if both package folders contains changes
#         package: ${{ fromJSON(needs.changes.outputs.packages) }}
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: src/${{ matrix.package }}
#     steps:
#       - uses: actions/checkout@v2
# # So the two key points are key in the filter is the directory name and then the part:

# # defaults:
# #       run:
# #         working-directory: src/${{ matrix.package }}
# # jobs:

# #   test-build:
# #     runs-on: ubuntu-latest
# #     name: Test Lambda function
# #     steps:
# #       - name: Checkout
# #         uses: actions/checkout@v2
      
# #       - name: Check which services were modified
# #         uses: dorny/paths-filter@v2
# #         id: filter
# #         with:
# #           list-files: shell
# #           filters: |
# #             functions:
# #               - 'function1/**'
# #               - 'function2/**'
      
# #       - name: Deploy changed services
# #         if: ${{ steps.filter.outputs.functions == 'true' }}
# #         run: |
# #           echo "All changes:"
# #           for i in ${{ steps.filter.outputs.services_files }}; do echo $i | awk ; done
    
#       # - uses: Stockopedia/action-get-changed-files@v1
#       #   id: get_changed
#       #   with:
#       #     github-token: ${{ secrets.GITHUB_TOKEN }}
#       #     ignore: "**/.github/)"
#       #     foldersOnly: true 
#       #     format: json
      
#       # - name: Echo changed files
#       #   run: echo ${{ steps.get_changed.outputs.changed }}
#       # - name: get changed files
#       #   id: getfile
#       #   run: |
#       #     echo "::set-output name=files::$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | xargs)"
      
#       # - name: echo output
#       #   run: |
#       #     echo ${{ steps.getfile.outputs.files }}